import io
from collections.abc import Mapping, Sequence

class Element:
    content: Sequence[Element]

class Block(Element): ...
class Inline(Element): ...
class MetaValue(Element): ...

class Doc(Element):
    metadata: Mapping[str, MetaValue]

class Caption(Element):
    def __init__(self, args: Block) -> None: ...

class Figure(Block):
    def __init__(self, args: Block, caption: Caption | None = None) -> None: ...

class Header(Block):
    def __init__(self, *args: Inline, level: int, identifier: str = "") -> None: ...

class Image(Inline):
    def __init__(self, *args: Inline, title: str = "") -> None: ...

class Link(Inline):
    def __init__(self, *args: Inline, title: str = "") -> None: ...

class MetaInlines(MetaValue):
    def __init__(self, *args: Inline) -> None: ...

class MetaString(MetaValue):
    def __init__(self, text: str) -> None: ...

class Para(Block):
    def __init__(self, *args: Inline) -> None: ...

class Plain(Block):
    def __init__(self, *args: Inline) -> None: ...

class Space(Inline): ...

class Span(Inline):
    def __init__(self, *args: Inline, classes: Sequence[str]) -> None: ...

class Str(Inline):
    def __init__(self, text: str) -> None: ...

def load(input_stream: io.TextIOBase | None = None) -> Doc: ...
def dump(doc: Doc, output_stream: io.TextIOBase | None = None) -> None: ...
