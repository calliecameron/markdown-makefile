"""Module definition for rules_markdown."""

module(
    name = "rules_markdown",
    version = "0.18.0",
)

bazel_dep(
    name = "bazel_skylib",
    version = "1.7.1",
)
bazel_dep(
    name = "rules_python",
    version = "0.36.0",
)
bazel_dep(
    name = "rules_rust",
    version = "0.52.2",
)
bazel_dep(
    name = "buildifier_prebuilt",
    version = "7.3.1",
)
bazel_dep(
    name = "platforms",
    version = "0.0.10",
)
bazel_dep(
    name = "rules_nixpkgs_core",
    version = "0.12.0",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.10",
)
use_repo(python, "python_versions")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.10",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pip")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.81.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
)
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:Cargo.toml",
        "//markdown/private/core:Cargo.toml",
        "//markdown/private/utils:Cargo.toml",
    ],
)
use_repo(crate, "crates")

nix_repo = use_extension("@rules_nixpkgs_core//extensions:repository.bzl", "nix_repo", isolate = True)
nix_repo.github(
    name = "nixpkgs",
    commit = "138474277cc4b56b5e1ca7fad0e113aff93e8780",  # 24.05 as of 2024/10/12
    sha256 = "aa9cb576b2ccfc2a8e9dfe632352aca8caec9acc69ec56f338f8588a846e73e0",
)
use_repo(nix_repo, "nixpkgs")

nix_pkg = use_extension("@rules_nixpkgs_core//extensions:package.bzl", "nix_pkg", isolate = True)
nix_pkg.attr(
    attr = "calibre",
)
nix_pkg.attr(
    attr = "hexdump",
)
nix_pkg.attr(
    attr = "hunspell",
)
nix_pkg.attr(
    attr = "glibcLocales",
    build_file_content = """exports_files(
    ["lib/locale/locale-archive"],
    visibility = ["//visibility:public"],
)""",
)
nix_pkg.attr(
    attr = "markdownlint-cli",
)
nix_pkg.attr(
    attr = "pandoc",
)
nix_pkg.attr(
    attr = "perl538Packages.strip-nondeterminism",
)
nix_pkg.attr(
    attr = "poppler_utils",
)
nix_pkg.attr(
    attr = "ruff",
)
nix_pkg.attr(
    attr = "shellcheck",
)
nix_pkg.attr(
    attr = "shfmt",
)
nix_pkg.expr(
    name = "texlive",
    attr = "",
    expr = "with import <nixpkgs> {}; texliveMedium.withPackages (ps: with ps; [ bold-extra footmisc titlesec xurl ])",
)
nix_pkg.attr(
    attr = "unoconv",
)
nix_pkg.attr(
    attr = "unzip",
)
nix_pkg.attr(
    attr = "zip",
)
use_repo(
    nix_pkg,
    "calibre",
    "glibcLocales",
    "hexdump",
    "hunspell",
    "markdownlint-cli",
    "pandoc",
    "perl538Packages.strip-nondeterminism",
    "poppler_utils",
    "ruff",
    "shellcheck",
    "shfmt",
    "texlive",
    "unoconv",
    "unzip",
    "zip",
)

hunspell_dicts = use_extension("//markdown/private/external:hunspell_dicts.bzl", "hunspell_dicts")
use_repo(hunspell_dicts, "hunspell_dicts")

prosegrinder_pandoc_templates = use_extension("//markdown/private/external:prosegrinder_pandoc_templates.bzl", "prosegrinder_pandoc_templates")
use_repo(prosegrinder_pandoc_templates, "prosegrinder_pandoc_templates")

markdown = use_extension("//markdown/extensions:markdown.bzl", "markdown", dev_dependency = True)
use_repo(markdown, "markdown")
