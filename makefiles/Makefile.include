# -*- makefile-gmake -*-
#
# This is the main markdown makefile. Should be included by user
# makefiles (run 'markdown-makefile <document-name>' to get one).
#
# Required variables:
#    BASE - the name of your document, without file extension
#
# Optional variables:
#    EXTRA_DICTIONARIES - by default, spell-checking uses $(BASE).dic.
#        Use this variable to specify additional dictionaries.
#    EXTRA_PREPROCESSING_FLAGS - additional flags to pass to pandoc at
#        the preprocessing stage (input md -> generated md).
#    EXTRA_PANDOC_FLAGS - additional flags to pass to pandoc at the
#        main stage (generated md -> other formats).
#    EXTRA_LATEX_FLAGS - additional flags to pass to pandoc at the
#         main stage, for latex-based output (generated md -> tex/pdf).
#    EXTRA_DEPS - additional dependencies to consider when deciding
#        whether to rebuild the output.
#    EXTRA_CLEAN_DEPS - additional files to remove with 'make clean'.
#    DOC_VERSION - version to embed in output; if not set, use git
#        commit info if in a git repo or date otherwise.
#    SOURCE_DATE_EPOCH - Unix timestamp for reproducible builds.
#        When unset, use current time.
#

# MAKEFLAGS += --no-builtin-rules --no-builtin-variables
# .SUFFIXES:
# .SECONDEXPANSION:

# ifndef BASE
# $(error BASE must be set to the document name)
# endif

# PANDOC_VERSION=$(shell pandoc --version | grep '^pandoc')
# ifneq ($(PANDOC_VERSION),pandoc 2.13)
# $(warning "Unsupported pandoc version; expected 2.13, got $(PANDOC_VERSION)")
# endif


# User-modifiable variables
# EXTRA_DICTIONARIES ?=
# EXTRA_PREPROCESSING_FLAGS ?=
# EXTRA_PANDOC_FLAGS ?=
# EXTRA_LATEX_FLAGS ?=
EXTRA_DEPS ?=
# EXTRA_CLEAN_DEPS ?=
# DOC_VERSION ?=
# SOURCE_DATE_EPOCH ?=

ifdef SOURCE_DATE_EPOCH
export SOURCE_DATE_EPOCH
endif


# # Base variables
# OUT_DIR := output
# OUT_BASE := $(OUT_DIR)/$(BASE)
# SAVED_DIR := saved
# GITIGNORE := $(MARKDOWN_MAKEFILE_DIR)/templates/default-gitignore
# GITATTRIBUTES := $(MARKDOWN_MAKEFILE_DIR)/templates/default-gitattributes
# GITCONFIG := $(MARKDOWN_MAKEFILE_DIR)/templates/default-gitconfig
# ZIP_CLEANER := $(MARKDOWN_MAKEFILE_DIR)/templates/zip-cleaner.sh


# # Top-level targets. These rely on the 'BASE' variable set in the user's
# # makefile.
# .FORCE:

# .PHONY: main all md txt tex pdf odt docx doc epub mobi md_ms docx_ms doc_ms save gitsetup clean .SUFFIXES .SECONDEXPANSION .FORCE .PRECIOUS

# main: pdf

# all: md txt tex pdf odt docx doc epub mobi md_ms docx_ms doc_ms

# $(OUT_DIR):
# 	@mkdir -p $(OUT_DIR)

# md: $(OUT_BASE).md

# txt: $(OUT_BASE).txt

# tex: $(OUT_BASE).tex

# pdf: $(OUT_BASE).pdf

# odt: $(OUT_BASE).odt

# docx: $(OUT_BASE).docx

# doc: $(OUT_BASE).doc

# epub: $(OUT_BASE).epub

# mobi: $(OUT_BASE).mobi

# md_ms: $(OUT_BASE)_ms.md

# docx_ms: $(OUT_BASE)_ms.docx

# doc_ms: $(OUT_BASE)_ms.doc

# save: all
# 	@rm -rf $(SAVED_DIR)
# 	@cp -a $(OUT_DIR) $(SAVED_DIR)

gitsetup: .gitignore .gitattributes .gitconfig

.gitignore: .FORCE
	@cp $(GITIGNORE) .gitignore

.gitattributes: .FORCE
	@cp $(GITATTRIBUTES) .gitattributes

.gitconfig: .FORCE
	@cp $(GITCONFIG) .gitconfig
	@git config --local include.path ../.gitconfig

# clean:
# 	@rm -rf $(OUT_DIR) *~ $(EXTRA_CLEAN_DEPS)


# # Markdown output. All other formats should only depend on $(OUT_DIR)/%.md,
# # since it's only created if preprocessing, validation etc. all succeed.
# PREPROCESSED := $(OUT_DIR)/_%_preprocessed.md
# WORDCOUNT := $(MARKDOWN_MAKEFILE_DIR)/templates/wordcount.lua
# PANDOC_INCLUDE_METADATA := $(MARKDOWN_MAKEFILE_DIR)/templates/pandoc-include.yaml
# METADATA_GENERATOR := $(MARKDOWN_MAKEFILE_DIR)/templates/generate-metadata.sh
# METADATA := $(OUT_DIR)/_%_metadata.yaml
# COMPLETE := $(OUT_DIR)/_%_complete.md
# VALIDATION_INPUT := $(OUT_DIR)/_%_validation_input.md
# METADATA_VALIDATION_INPUT_GENERATOR := $(MARKDOWN_MAKEFILE_DIR)/templates/generate-metadata-validation-input.sh
# METADATA_VALIDATION_INPUT := $(OUT_DIR)/_%_metadata_validation_input.md
# VALIDATOR := $(MARKDOWN_MAKEFILE_DIR)/templates/validate.sh
# VALIDATED := $(OUT_DIR)/_%_validated
# DICTIONARY_GENERATOR := $(MARKDOWN_MAKEFILE_DIR)/templates/generate-dictionary.sh
# DICTIONARY := $(OUT_DIR)/_%_dictionary.dic
# SPELLCHECKER := $(MARKDOWN_MAKEFILE_DIR)/templates/spellcheck.sh
# SPELLCHECKED := $(OUT_DIR)/_%_spellchecked

# # We do a separate 'preprocessing' step from md to md first, so that pandoc
# # can run any filters *without* --smart enabled. Having filters and smart
# # enabled at the same time can make ligatures get escaped later, whereas this
# # ensures they're passed through correctly.
# $(PREPROCESSED): %.md *.md $(OUT_DIR) $(EXTRA_DEPS)
# 	@pandoc --filter=pandoc-include --lua-filter=$(WORDCOUNT) --metadata-file=$(PANDOC_INCLUDE_METADATA) --from=markdown-smart --to=markdown-smart --strip-comments --standalone $(EXTRA_PREPROCESSING_FLAGS) -o $@ $<

# $(METADATA): $(PREPROCESSED)
# 	@DOC_VERSION=$(DOC_VERSION) $(METADATA_GENERATOR) $@ $<

# $(COMPLETE): $(PREPROCESSED) $(METADATA)
# 	@pandoc --from=markdown-smart --to=markdown-smart --standalone -o $@ $^

# $(VALIDATION_INPUT): $(COMPLETE)
# 	@pandoc --from=markdown+smart --to=markdown-smart -o $@ $<

# $(METADATA_VALIDATION_INPUT): $(COMPLETE)
# 	@$(METADATA_VALIDATION_INPUT_GENERATOR) $@ $<

# $(VALIDATED): $(VALIDATION_INPUT) $(METADATA_VALIDATION_INPUT)
# 	@$(VALIDATOR) $^
# 	@touch $@

# $(DICTIONARY): $(OUT_DIR) $$(wildcard $$*.dic) $(EXTRA_DICTIONARIES)
# 	@$(DICTIONARY_GENERATOR) $@ $*.dic $(EXTRA_DICTIONARIES)

# $(SPELLCHECKED): $(DICTIONARY) $(VALIDATION_INPUT) $(METADATA_VALIDATION_INPUT)
# 	@$(SPELLCHECKER) $^
# 	@touch $@

# $(OUT_DIR)/%.md: $(COMPLETE) $(VALIDATED) $(SPELLCHECKED)
# 	@cp $< $@


# # Text output. This is included only because when copying into another program,
# # it's sometimes easier to copy without markdown syntax.
# $(OUT_DIR)/%.txt: $(OUT_DIR)/%.md
# 	@pandoc --from=markdown+smart --to=plain --standalone $(EXTRA_PANDOC_FLAGS) -o $@ $<


# # Latex-based outputs.
# LATEX_TEMPLATE := $(MARKDOWN_MAKEFILE_DIR)/templates/template.tex
# LATEX_HEADER := $(MARKDOWN_MAKEFILE_DIR)/templates/header.tex
# LATEX_BEFORE := $(MARKDOWN_MAKEFILE_DIR)/templates/before.tex
# LATEX_HEADER_PROCESSED := $(OUT_DIR)/_%_header.tex
# LATEX_BEFORE_PROCESSED := $(OUT_DIR)/_%_before.tex
# LATEX_DEPS := $(LATEX_HEADER_PROCESSED) $(LATEX_BEFORE_PROCESSED)
# LATEX_FLAGS := --pdf-engine=xelatex --template=$(LATEX_TEMPLATE)
# LATEX_VARS := --variable=fontsize:12pt --variable=papersize:a4 --variable=documentclass:article --variable=geometry:a4paper --variable=strikeout --variable=verbatim-in-note --variable=linkcolor:black '--variable=mainfont:TeX Gyre Termes' --variable=indent

# $(LATEX_HEADER_PROCESSED): $(OUT_DIR)/%.md
# 	@pandoc --template=$(LATEX_HEADER) $(LATEX_VARS) $(EXTRA_LATEX_FLAGS) $(EXTRA_PANDOC_FLAGS) -o $@ $<

# $(LATEX_BEFORE_PROCESSED): $(OUT_DIR)/%.md
# 	@pandoc --template=$(LATEX_BEFORE) $(LATEX_VARS) $(EXTRA_LATEX_FLAGS) $(EXTRA_PANDOC_FLAGS) -o $@ $<

# $(OUT_DIR)/%.tex: $(OUT_DIR)/%.md $(LATEX_DEPS)
# 	@pandoc --from=markdown+smart --standalone --include-in-header=$(OUT_DIR)/_$*_header.tex --include-before-body=$(OUT_DIR)/_$*_before.tex $(LATEX_FLAGS) $(EXTRA_LATEX_FLAGS) $(LATEX_VARS) $(EXTRA_PANDOC_FLAGS) -o $@ $<

# $(OUT_DIR)/%.pdf: $(OUT_DIR)/%.md $(LATEX_DEPS)
# 	@pandoc --from=markdown+smart --include-in-header=$(OUT_DIR)/_$*_header.tex --include-before-body=$(OUT_DIR)/_$*_before.tex $(LATEX_FLAGS) $(EXTRA_LATEX_FLAGS) $(LATEX_VARS) $(EXTRA_PANDOC_FLAGS) -o $@ $<


# # Word-processor outputs.
# DOCX_TEMPLATE := $(MARKDOWN_MAKEFILE_DIR)/templates/reference.docx
# DOCX_FILTER := $(MARKDOWN_MAKEFILE_DIR)/templates/docx-filter.lua
# METADATA_MS := $(OUT_DIR)/_%_metadata_ms.yaml
# METADATA_MS_GENERATOR := $(MARKDOWN_MAKEFILE_DIR)/templates/generate-ms-metadata.sh
# MS_DOCX_FILTER := $(MARKDOWN_MAKEFILE_DIR)/templates/ms-docx-filter.lua

# $(OUT_DIR)/%.odt: $(OUT_DIR)/%.md
# 	@pandoc --from=markdown+smart $(EXTRA_PANDOC_FLAGS) -o $@ $<
# 	@$(ZIP_CLEANER) $@

# $(OUT_DIR)/%.docx: $(OUT_DIR)/%.md
# 	@pandoc --from=markdown+smart --reference-doc=$(DOCX_TEMPLATE) --lua-filter=$(DOCX_FILTER) $(EXTRA_PANDOC_FLAGS) -o $@ $<
# 	@$(ZIP_CLEANER) $@

# $(OUT_DIR)/%.doc: $(OUT_DIR)/%.docx
# 	@unoconv -f doc -o $@ $<

# $(METADATA_MS): $(OUT_DIR)/%.md
# 	@$(METADATA_MS_GENERATOR) $@ $<

# $(OUT_DIR)/%_ms.md: $(OUT_DIR)/%.md $(METADATA_MS)
# 	@pandoc --from=markdown-smart --to=markdown-smart --standalone -o $@ $^

# # Uses md2short.sh from https://github.com/prosegrinder/pandoc-templates
# $(OUT_DIR)/%_ms.docx: $(OUT_DIR)/%_ms.md
# 	@md2short.sh --overwrite --modern -o $@ --lua-filter=$(MS_DOCX_FILTER) $<
# 	@$(ZIP_CLEANER) $@


# # Ebook outputs.
# EPUB_CSS := $(MARKDOWN_MAKEFILE_DIR)/templates/epub.css

# $(OUT_DIR)/%.epub: $(OUT_DIR)/%.md
# 	@pandoc --from=markdown+smart --css=$(EPUB_CSS) $(EXTRA_PANDOC_FLAGS) -o $@ $<
# 	@$(ZIP_CLEANER) $@

# # Uses ebook-convert from Calibre
# $(OUT_DIR)/%.mobi: $(OUT_DIR)/%.epub
# 	@ebook-convert $< $@


# .PRECIOUS: $(PREPROCESSED) $(METADATA) $(COMPLETE) $(VALIDATION_INPUT) $(METADATA_VALIDATION_INPUT) $(VALIDATED) $(DICTIONARY) $(SPELLCHECKED) $(LATEX_HEADER_PROCESSED) $(LATEX_BEFORE_PROCESSED) $(METADATA_MS)
